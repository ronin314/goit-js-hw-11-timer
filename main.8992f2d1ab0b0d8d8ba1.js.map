{"version":3,"sources":["webpack:///./templates/timer-item.hbs","webpack:///./js/templating.js","webpack:///./js/countdown-timer.js"],"names":["Handlebars","module","exports","template","container","depth0","helpers","partials","data","alias1","lambda","alias2","escapeExpression","stack1","lookupProperty","parent","propertyName","Object","prototype","hasOwnProperty","call","nullContext","program","noop","timerDivRef","document","querySelector","timerMarkup","timerItem","timerParameters","insertAdjacentHTML","refs","days","hours","mins","secs","pad","value","String","padStart","targetDate","Date","setInterval","currentTime","now","time","Math","floor","textContent","updateTimerValue","timer"],"mappings":"8EAAA,IAAIA,EAAa,EAAQ,QAEzBC,EAAOC,SAAWF,EAAoB,SAAKA,GAAYG,SAAS,CAAC,EAAI,SAASC,EAAUC,EAAOC,EAAQC,EAASC,GAC5G,IAAIC,EAAOL,EAAUM,OAAQC,EAAOP,EAAUQ,iBAEhD,MAAO,8DACHD,EAAOF,EAAOJ,EAAQA,IACtB,0CACAM,EAAOF,EAAOJ,EAAQA,IACtB,yBACJ,SAAW,CAAC,EAAE,YAAY,KAAO,SAASD,EAAUC,EAAOC,EAAQC,EAASC,GAC1E,IAAIK,EAON,OAA8R,OAArRA,GAPsBT,EAAUU,gBAAkB,SAASC,EAAQC,GACtE,GAAIC,OAAOC,UAAUC,eAAeC,KAAKL,EAAQC,GAC/C,OAAOD,EAAOC,KAKWV,EAAQ,QAAQc,KAAe,MAAVf,EAAiBA,EAAUD,EAAUiB,aAAe,GAAIhB,EAAO,CAAC,KAAO,OAAO,KAAO,GAAG,GAAKD,EAAUkB,QAAQ,EAAGd,EAAM,GAAG,QAAUJ,EAAUmB,KAAK,KAAOf,EAAK,IAAM,CAAC,MAAQ,CAAC,KAAO,EAAE,OAAS,GAAG,IAAM,CAAC,KAAO,EAAE,OAAS,OAAiBK,EAAS,IAC9S,SAAU,K,qGChBNW,EAAcC,SAASC,cAAc,YACrCC,EAAcC,IAAUC,GAC9BL,EAAYM,mBAAmB,YAAaH,G,wBCLtCI,EAAO,CACXC,KAAMP,SAASC,cAAc,2BAC7BO,MAAOR,SAASC,cAAc,4BAC9BQ,KAAMT,SAASC,cAAc,8BAC7BS,KAAMV,SAASC,cAAc,+BA6B/B,SAASU,EAAIC,GACX,OAAOC,OAAOD,GAAOE,SAAS,EAAG,MA3BrB,WAEV,IAAMC,EAAa,IAAIC,KAAK,gBAC5BC,aAAY,WACV,IAAMC,EAAcF,KAAKG,OAQ/B,SAA0BC,GACxB,IAAMb,EAAOI,EAAIU,KAAKC,MAAMF,EAAO,QAC7BZ,EAAQG,EACZU,KAAKC,MAAOF,EAAO,MAAR,OAEPX,EAAOE,EAAIU,KAAKC,MAAOF,EAAO,KAAR,MACtBV,EAAOC,EAAIU,KAAKC,MAAOF,EAAO,IAAe,MAEnDd,EAAKC,KAAKgB,YAAchB,EACxBD,EAAKE,MAAMe,YAAcf,EACzBF,EAAKG,KAAKc,YAAcd,EACxBH,EAAKI,KAAKa,YAAcb,EAjBpBc,CADaT,EAAaG,KAEzB,MAGPO,I","file":"main.8992f2d1ab0b0d8d8ba1.js","sourcesContent":["var Handlebars = require(\"../../node_modules/handlebars/runtime.js\");\nfunction __default(obj) { return obj && (obj.__esModule ? obj[\"default\"] : obj); }\nmodule.exports = (Handlebars[\"default\"] || Handlebars).template({\"1\":function(container,depth0,helpers,partials,data) {\n    var alias1=container.lambda, alias2=container.escapeExpression;\n\n  return \"<div class=\\\"field\\\">\\r\\n    <span class=\\\"value\\\" data-value=\\\"\"\n    + alias2(alias1(depth0, depth0))\n    + \"\\\">00</span>\\r\\n    <span class=\\\"label\\\">\"\n    + alias2(alias1(depth0, depth0))\n    + \"</span>\\r\\n</div>\\r\\n\";\n},\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return ((stack1 = lookupProperty(helpers,\"each\").call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":6,\"column\":9}}})) != null ? stack1 : \"\");\n},\"useData\":true});","import timerParameters from '../timer-parameters.json';\r\nimport timerItem from '../templates/timer-item.hbs';\r\n\r\nconst timerDivRef = document.querySelector('#timer-1');\r\nconst timerMarkup = timerItem(timerParameters);\r\ntimerDivRef.insertAdjacentHTML('beforeend', timerMarkup);\r\n","const refs = {\r\n  days: document.querySelector('span[data-value=\"days\"]'),\r\n  hours: document.querySelector('span[data-value=\"hours\"]'),\r\n  mins: document.querySelector('span[data-value=\"minutes\"]'),\r\n  secs: document.querySelector('span[data-value=\"seconds\"]'),\r\n};\r\n\r\nconst timer = {\r\n  start() {\r\n    const targetDate = new Date('Jan 31, 2021');\r\n    setInterval(() => {\r\n      const currentTime = Date.now();\r\n      const time = targetDate - currentTime;\r\n      updateTimerValue(time);\r\n    }, 1000);\r\n  },\r\n};\r\ntimer.start();\r\n\r\nfunction updateTimerValue(time) {\r\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n  const hours = pad(\r\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n  );\r\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n  refs.days.textContent = days;\r\n  refs.hours.textContent = hours;\r\n  refs.mins.textContent = mins;\r\n  refs.secs.textContent = secs;\r\n}\r\n\r\nfunction pad(value) {\r\n  return String(value).padStart(2, '0');\r\n}\r\n"],"sourceRoot":""}